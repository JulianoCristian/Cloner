// Cloner - An example of use of procedural instancing.
// https://github.com/keijiro/Cloner

#pragma kernel ClonerUpdate

#include "Common.hlsl"

StructuredBuffer<float4> PositionBuffer;
StructuredBuffer<float4> NormalBuffer;
StructuredBuffer<float4> TangentBuffer;
RWStructuredBuffer<float4> TransformBuffer;

CBUFFER_START(Params)

    uint InstanceCount;
    uint BufferStride;

    float BaseScale;
    float ScaleNoise;
    float ScalePulse;

    float NoiseFrequency;
    float3 NoiseOffset;
    float NormalModifier;

    float PulseProbability;
    float PulseTime;

CBUFFER_END

[numthreads(128, 1, 1)]
void ClonerUpdate(uint id : SV_DispatchThreadID)
{
    if (id >= InstanceCount) return;

    float3 p = PositionBuffer[id].xyz;
    float3 n = NormalBuffer[id].xyz;
    float4 t = TangentBuffer[id];

    // Divergence free noise field.
    float4 sn1 = snoise(98.4898 + p * NoiseFrequency + NoiseOffset);
    float4 sn2 = snoise( 1.2278 - p * NoiseFrequency + NoiseOffset);
    float3 dfn = cross(sn1.xyz, sn2.xyz);

    // Normal modification.
    float3 nz = normalize(n + dfn * NormalModifier);
    float3 ny = normalize(cross(nz, t.xyz) * t.w);
    float3 nx = cross(nz, ny);

    // UV offsetting.
    uint hash = Hash(id);
    float uoffs = float(hash & 0xfff000) / 0x1000000;
    float voffs = float(hash & 0x000fff) / 0x0001000;
    float uvoffs = uoffs + floor(voffs * 1000);

    // Pulse noise.
    float ptime = PulseTime + float(id) / InstanceCount;
    uint seed = id * 131071 + (uint)ptime;
    float pulse0 = Random(seed + 0) < PulseProbability;
    float pulse1 = Random(seed + 1) < PulseProbability;
    float pulse = lerp(pulse0, pulse1, smoothstep(0, 1, frac(ptime)));

    // Scale factor.
    float scale = max(0, BaseScale + sn1.w * ScaleNoise) + pulse * ScalePulse;

    TransformBuffer[id + BufferStride * 0] = float4(p, scale);
    TransformBuffer[id + BufferStride * 1] = float4(nx, uvoffs);
    TransformBuffer[id + BufferStride * 2] = float4(ny, sn2.w);
}
