#pragma kernel SwarmInit
#pragma kernel SwarmUpdate

#include "UnityCG.cginc"
#include "SimplexNoiseGrad3D.cginc"

RWStructuredBuffer<float4> PositionBuffer;

CBUFFER_START(Params)
    uint ArraySize;
    uint InstanceCount;
    float Offset;
CBUFFER_END

float UVRandom(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v));
    return frac(43758.5453 * sin(f));
}

[numthreads(64,1,1)]
void SwarmInit(uint id : SV_DispatchThreadID)
{
    float4 p = float4(
        UVRandom(id, 0.0),
        UVRandom(id, 0.1),
        UVRandom(id, 0.2),
        UVRandom(id, 0.3)
    ) * 1.4 - 0.7;

    for (uint i = 0; i < ArraySize; i++)
        PositionBuffer[id + i * InstanceCount] = p;
}

[numthreads(64,1,1)]
void SwarmUpdate(uint id : SV_DispatchThreadID)
{
    uint offs = id;
    for (uint i = 0; i < ArraySize - 1; i++)
    {
        PositionBuffer[offs] = PositionBuffer[offs + InstanceCount];
        offs += InstanceCount;
    }

    float3 p = PositionBuffer[offs].xyz;

    float3 sn1 = snoise_grad(10.33 + p / 2 + Offset * 0.01);
    float3 sn2 = snoise_grad(32.38 - p / 2 + Offset * 0.01);
    p += cross(sn1, sn2) * 0.0023;

    PositionBuffer[offs].xyz = p;
}
